/*Задание 3. Матрицы
Требуется реализовать небольшую программу для сравнения двух двумерных 
+ матриц размером 4 × 4 на предмет их 
+ полного равенства. 
+ Если матрицы равны друг другу, необходимо взять одну из матриц и привести её к диагональному виду. 

+ Программа принимает на вход две целочисленные матрицы A и B, которые вводятся с помощью std::cin, 
и сравнивает их на предмет полного равенства. 

+ Если матрицы равны, то об этом сообщается в стандартном выводе. 

Алгоритм должен быть по 
возможности оптимальным и не проводить лишних операций. 

+ Если матрицы не равны, выводится соответствующее сообщение и выполнение программы прекращается. 

+ Если матрицы равны, то из них выбирается одна и преобразуется в диагональную. 

+ Конвертация в диагональную форму делается путём простейшего зануления всех элементов, лежащих вне главной диагонали. 

Напомню, что 
диагональная матрица — это такая матрица, у которой все элементы вне диагонали равны нулю. 
Диагональ матрицы, в свою очередь, — это все элементы, расположенные по диагонали от первого 
элемента первой строки до последнего элемента последней строки. Итоговую диагональную матрицу 
можно расположить на месте прежней матрицы, не используя дополнительных переменных. Результат 
преобразования требуется вывести в консоль для проверки. Ищите именно оптимальное решение, оно 
довольно простое.

Советы и рекомендации
Чтобы не производить лишних вычислений, стоит при первом же расхождении значений в соответствующих
ячейках завершить алгоритм.
+ Если хотя бы один элемент матриц не совпадает, можно сразу останавливать проверку.
Чтобы в результате получить диагональную матрицу, достаточно пройти по каждому элементу массива 
и занулить его, если строка не равна столбцу.
Достаточно привести матрицу к диагональному виду. Делать алгоритмическое преобразование не нужно.
+ Сравнение матриц и приведение матрицы к диагональному виду лучше оформить в виде отдельных функций.
Что оценивается
Программа корректно сравнивает две матрицы и в случае совпадения формирует диагональную матрицу.*/

#include <iostream>

// матрицы с размером 4 × 4
int const SIZE = 4;

// Функция для сравнения двух матриц
bool areMatriсesEqual(int matrixA[SIZE][SIZE], int matrixB[SIZE][SIZE])
{
	for (int i = 0; i < SIZE; i++)
	{
		for (int j = 0; j < SIZE; j++) 
		{
			if (matrixA[i][j] != matrixB[i][j])
			{
				return false; // если матрицы не равны, возвращаем false
			}
		}
	}
	return true; // если матрицы равны, возвращаем true
}

// Функция для преобразования матрицы к диагональному виду
void convertToDioganalMatrix(int matrix[SIZE][SIZE])
{
	for (int i = 0; i < SIZE; i++)
	{
		for (int j = 0; j < SIZE; j++)
		{
			if (i != j)
			{
				matrix[i][j] = 0; // зануляем элементы вне диагонали

			}
		}
	}
}


int main()
{
	int matrixA[SIZE][SIZE], matrixB[SIZE][SIZE];
	
	std::cout << "Enter the matrix A 4*4:\n";
	for (int i = 0; i < SIZE; i++)
	{
		for (int j = 0; j < SIZE; j++)
		{
			std::cin >> matrixA[i][j];
		}
	}

	std::cout << "Enter the matrix B 4*4:\n";
	for (int i = 0; i < SIZE; i++)
	{
		for (int j = 0; j < SIZE; j++)
		{
			std::cin >> matrixB[i][j];
		}
	}

	// Сравнение матриц A и B
	if (areMatriсesEqual(matrixA, matrixB))
	{
		std::cout << "A and B are equal!" << '\n';

		// преобразования матрицы 'A' к диагональному виду 
		convertToDioganalMatrix(matrixA);

		for (int i = 0; i < SIZE; i++)
		{
			for (int j = 0; j < SIZE; j++)
			{
				std::cout << matrixA[i][j] << " ";
			}
			std::cout << '\n';
		}
	} 
	else
	{
		std::cout << "Matrices A and B are not equal!" << '\n';	
	}
}
